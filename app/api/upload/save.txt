import { NextResponse } from 'next/server';
import http from 'http';
import { BlobServiceClient } from '@azure/storage-blob';
import { MongoClient } from 'mongodb';

const mongodbUri = process.env.MONGODB_URI;
const containerName = process.env.CONTAINER_NAME;
const sasToken = process.env.SAS_TOKEN;
const accountName = process.env.ACCOUNT_NAME;

const blobServiceClient = new BlobServiceClient(
    `https://${accountName}.blob.core.windows.net/?${sasToken}`
);
const containerClient = blobServiceClient.getContainerClient(containerName);

const client = new MongoClient(mongodbUri);
client.connect();

const server = http.createServer(() => {
    // handle image upload logic here
});
const port = process.env.PORT || 3001;
server.listen(port, () => {
    console.log(`Server running on port ${port}`);
});

async function extractMetadata(headers) {
    const contentType = headers['content-type'];
    const fileType = contentType.split('/')[1];
    const contentDisposition = headers['content-disposition'];
    const caption = headers['x-image-caption'] || 'No caption';
    const matches = /filename="([^"]+)/i.exec(contentDisposition);
    const fileName = matches?.[1] || `image-${Date.now()}.${fileType}`;

    return { fileName, caption, fileType };
}

async function uploadImageStream(blobName, dataStream) {
    const blockBlobClient = containerClient.getBlockBlobClient(blobName);
    await blockBlobClient.uploadStream(dataStream);
    return blockBlobClient.url;
}

async function storeMetadata(filename, caption, imageUrl, fileType) {
    const collection = client.db('bookreview').collection('images');
    await collection.insertOne({ filename, caption, fileType, imageUrl });
}

export async function POST(request) {
    request.setHeader('content-type', 'application/json');
    try {
        const { fileName, caption, fileType } = await extractMetadata(request.headers);

        const imageUrl = await uploadImageStream(fileName, request);

        await storeMetadata(fileName, caption, imageUrl, fileType);

        return NextResponse.json({ message: 'Image uploaded successfully' }, { status: 200 });
    } catch (error) {
        console.log(error);
        return NextResponse.json({ message: 'Image upload failed' }, { status: 500 });
    }
}
